# .gitignore Explanation and Best Practices

## What is .gitignore?
The `.gitignore` file tells Git which files and directories to ignore when committing changes. It prevents certain files (such as sensitive data, system files, or unnecessary generated files) from being tracked and uploaded to repositories like GitHub.

## How it works
Git will check the `.gitignore` file for patterns and exclude any file or folder that matches these patterns from being staged for commit. This ensures that unnecessary or sensitive files are not uploaded to the remote repository.

## Common Entries
- **Data folders**: It is common to ignore directories containing large datasets (`data/`, `data_created/`) to avoid uploading large and potentially sensitive files.
- **Generated files**: Ignore directories like `visuals_created/`, which store visualizations or processed files that can be regenerated from the raw data.
- **Environment files**: Files like `.env` that contain sensitive configuration data (API keys, passwords) should never be uploaded to a public repository.
- **Python compiled files**: Ignore Python's cache files like `__pycache__/` and `*.pyc`.
- **System files**: Ignore system-specific files such as `.DS_Store` (macOS) or `Thumbs.db` (Windows) that have no relevance in the codebase.
- **Virtual environment files**: Ignore directories like `venv/` or `env/` where dependencies are stored.

## Best Practices
- Always include a `.gitignore` file in the root of your project.
- Review the `.gitignore` file periodically to ensure that all necessary files are excluded.
- Avoid including sensitive information like passwords or API keys in your repository. Use environment variables instead.
- You can check which files are being tracked by Git using `git status`. If a file you intended to ignore is listed, ensure it is properly excluded in `.gitignore`.

